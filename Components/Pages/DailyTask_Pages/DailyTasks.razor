@page "/dailytasks"
@using Microsoft.AspNetCore.Authorization
@using PokeGoTools.Data
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IJSRuntime _JS
@inject IDailyTaskRepository _dailyTaskRepository
@attribute [Authorize]

@if(IsProcessing)
{
    <div class="text-center">
        <img src="images/icons/pokeball_spinner.gif" height="150" width="150" />
    </div>
}
else
{
    <div class="card col-6 shadow mb-5 bg-white rounded">
        <h3 class="card-header">Daily Tasks</h3>
        <div class="card-body">

            <ul class="list-group">
                @foreach (var task in DailyTaskList)
                {
                    <li class="list-group-item list-group-item-action">
                        <div class="row w-100">
                            <div class="col-1">
                                <InputCheckbox class="form-check-input fs-4" role="button" Value="task.IsCompleted"
                                ValueChanged="async (checkedValue) => await ToggleIsCompleted(task.Id, checkedValue)"
                                ValueExpression="() => task.IsCompleted" />
                            </div>
                            <div class="col-10 d-flex align-items-center text-start">
                                <img src="images/icons/pokeball_icon.png" height="20" width="20" class="mx-1" /><label class="fs-5 @((task.IsCompleted) ? "text-muted text-decoration-line-through" : "") "> @task.Name</label>
                            </div>
                            <div class="col-1 text-end">
                                <i class="bi bi-trash3 text-end" role="button" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal" @onclick="()=>ConfirmDeleteTask(task.Id)"></i>
                            </div>
                        </div>
                    </li>
                }
            </ul>
            <button type="button" class="btn btn-primary m-1" data-bs-toggle="modal" data-bs-target="#addTaskModal"><i class="bi bi-plus-square"></i> Create Task</button>

        </div>

    </div>

}

<!-- addTaskModal -->
<div class="modal fade" id="addTaskModal" tabindex="-1" aria-labelledby="addTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Add New Task</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div class="form-group">
                    <label for="inputTask">Task Name</label>
                    <InputText required type="text" class="form-control" id="inputTask" @bind-Value="NewTaskName" aria-describedby="taskHelp" placeholder="Enter task name" />
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="AddTask">Submit</button>
            </div>
        </div>
    </div>
</div>

<!-- confirmDeleteModal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="addTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Confirm Delete Task</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <p>Are you sure you want to delete the task "@DeleteTaskName"?</p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="DeleteTask">Delete</button>
            </div>
        </div>
    </div>
</div>

<!--Toast-->
<div class="toast-container position-static">
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="taskToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <img src="/images/icons/pokeball_icon.png" height="12" width="12" class="rounded me-2" alt="pokeball-icon">
                <strong class="me-auto">Daily Tasks</strong>
                <small>just now</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                Hello, world! This is a toast message.
            </div>
        </div>
    </div>
</div>


@code {
    private IEnumerable<DailyTask> DailyTaskList = new List<DailyTask>();
    private string UserId = "";
    private bool IsProcessing = true;
    private string NewTaskName = "";
    private int DeleteTaskId;
    private string DeleteTaskName = "";

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        await LoadTaskList();
        IsProcessing = false;
        StateHasChanged();
    }

    private async Task ToggleIsCompleted(int id, bool isChecked)
    {
        await _dailyTaskRepository.ToggleTaskAsync(id);
        DailyTaskList = await _dailyTaskRepository.GetAllAsync(UserId);


        if(isChecked)
        {
            var completedTask = DailyTaskList.FirstOrDefault(u => u.Id == id);
            await _JS.InvokeVoidAsync("showToastWithMessage", "taskToast", "Completed task: " + completedTask.Name);
        }   
        StateHasChanged();
    }

    private async Task LoadTaskList(){
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        await _dailyTaskRepository.ResetTaskAsync(UserId);
        DailyTaskList = await _dailyTaskRepository.GetAllAsync(UserId);
        StateHasChanged();
    }

    private async Task AddTask(){

        if(NewTaskName != null && NewTaskName != "")
        {
            IsProcessing = true;
            StateHasChanged();

            var newTask = new DailyTask { Name = NewTaskName, IsCompleted = false, LastUpdated = DateOnly.FromDateTime(DateTime.Today.AddDays(-1)), UserId = UserId };
            await _dailyTaskRepository.CreateAsync(newTask);

            await LoadTaskList();
            await _JS.InvokeVoidAsync("showToastWithMessage", "taskToast", "New task added: " + NewTaskName);
            NewTaskName = "";
            IsProcessing = false;
            StateHasChanged();
        }

    }

    private void ConfirmDeleteTask(int taskId)
    {
        DeleteTaskId = taskId;
        var task = DailyTaskList.FirstOrDefault(u => u.Id == DeleteTaskId);
        DeleteTaskName = task.Name;
    }

    private async Task DeleteTask()
    {  
        if(DeleteTaskId > 0)
        {
            IsProcessing = true;
            var task = DailyTaskList.FirstOrDefault(u => u.Id == DeleteTaskId);
            await _dailyTaskRepository.DeleteAsync(DeleteTaskId);
            await LoadTaskList();
            IsProcessing = false;
            await _JS.InvokeVoidAsync("showToastWithMessage", "taskToast", "Successfully deleted task: " + task.Name);
            DeleteTaskId = 0;
            DeleteTaskName = "";
        }

    }
}
