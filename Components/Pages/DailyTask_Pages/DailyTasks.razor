@page "/dailytasks"
@using Microsoft.AspNetCore.Authorization
@using PokeGoTools.Data
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IDailyTaskRepository _dailyTaskRepository
@attribute [Authorize]

@if(IsProcessing)
{
    <div class="text-center">
        <img src="images/icons/pokeball_spinner.gif" height="150" width="150" />
    </div>
}
else
{
    <div class="card col-6 shadow mb-5 bg-white rounded">
        <h3 class="card-header">Daily Tasks</h3>
        <div class="card-body">


            <div class="row m-1">

                <ul class="list-group">
                    @foreach (var task in DailyTaskList)
                    {
                        <li class="list-group-item list-group-item-action">
                            <InputCheckbox class="form-check-input col-sm-3 fs-4" role="button" Value="task.IsCompleted"
                            ValueChanged="async (checkedValue) => await ToggleIsCompleted(task.Id, checkedValue)"
                            ValueExpression="() => task.IsCompleted" />
                            <img src="images/icons/pokeball_icon.png" height="20" width="20" class="mx-1" /><label class="col-sm-9 fs-5 @((task.IsCompleted) ? "text-muted text-decoration-line-through" : "") "> @task.Name</label>
                        </li>
                    }
                </ul>

                <div class="row pt-2">
                    <button type="button" class="btn btn-primary col-2"><i class="bi bi-plus-square"></i> Add Task</button>
                </div>
            </div>
        </div>

    </div>
}



@code {
    private IEnumerable<DailyTask> DailyTaskList = new List<DailyTask>();
    private string UserId = "";
    private bool IsProcessing = true;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        await LoadTaskList();
        IsProcessing = false;
        StateHasChanged();
    }

    private async Task ToggleIsCompleted(int id, bool isChecked)
    {
        await _dailyTaskRepository.ToggleTaskAsync(id);
        DailyTaskList = await _dailyTaskRepository.GetAllAsync(UserId);
        StateHasChanged();
    }

    private async Task LoadTaskList(){
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        await _dailyTaskRepository.ResetTaskAsync(UserId);
        DailyTaskList = await _dailyTaskRepository.GetAllAsync(UserId);
        StateHasChanged();
    }
    
}
